{"ast":null,"code":"import { clear, colorToHsl, colorToRgb, deepExtend, drawConnectLine, drawGrabLine, drawParticle, drawParticlePlugin, drawPlugin, getStyleFromHsl, getStyleFromRgb, gradient, paintBase } from \"../Utils\";\nimport { Constants } from \"./Utils\";\nexport class Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  init() {\n    this.resize();\n    this.initStyle();\n    this.initCover();\n    this.initTrail();\n    this.initBackground();\n    this.paint();\n  }\n\n  loadCanvas(canvas) {\n    var _a;\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.generatedCanvas = canvas.dataset && Constants.generatedAttribute in canvas.dataset ? canvas.dataset[Constants.generatedAttribute] === \"true\" : this.generatedCanvas;\n    this.element = canvas;\n    this.originalStyle = deepExtend({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this.context = this.element.getContext(\"2d\");\n    this.container.retina.init();\n    this.initBackground();\n  }\n\n  destroy() {\n    var _a;\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.draw(ctx => {\n      clear(ctx, this.size);\n    });\n  }\n\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n        clear(ctx, this.size);\n        this.paintBase(getStyleFromRgb(this.coverColor, this.coverColor.a));\n      } else {\n        this.paintBase();\n      }\n    });\n  }\n\n  clear() {\n    const options = this.container.actualOptions;\n    const trail = options.particles.move.trail;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n      this.paintBase(getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n    } else {\n      this.draw(ctx => {\n        clear(ctx, this.size);\n      });\n    }\n  }\n\n  async windowResize() {\n    if (!this.element) {\n      return;\n    }\n\n    const container = this.container;\n    this.resize();\n    const needsRefresh = container.updateActualOptions();\n    container.particles.setDensity();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.resize !== undefined) {\n        plugin.resize();\n      }\n    }\n\n    if (needsRefresh) {\n      await container.refresh();\n    }\n  }\n\n  resize() {\n    if (!this.element) {\n      return;\n    }\n\n    const container = this.container;\n    const pxRatio = container.retina.pixelRatio;\n    const size = container.canvas.size;\n    const oldSize = {\n      width: size.width,\n      height: size.height\n    };\n    size.width = this.element.offsetWidth * pxRatio;\n    size.height = this.element.offsetHeight * pxRatio;\n    this.element.width = size.width;\n    this.element.height = size.height;\n\n    if (this.container.started) {\n      this.resizeFactor = {\n        width: size.width / oldSize.width,\n        height: size.height / oldSize.height\n      };\n    }\n  }\n\n  drawConnectLine(p1, p2) {\n    this.draw(ctx => {\n      var _a;\n\n      const lineStyle = this.lineStyle(p1, p2);\n\n      if (!lineStyle) {\n        return;\n      }\n\n      const pos1 = p1.getPosition();\n      const pos2 = p2.getPosition();\n      drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    });\n  }\n\n  drawGrabLine(particle, lineColor, opacity, mousePos) {\n    const container = this.container;\n    this.draw(ctx => {\n      var _a;\n\n      const beginPos = particle.getPosition();\n      drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    });\n  }\n\n  drawParticle(particle, delta) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n\n    const pfColor = particle.getFillColor();\n    const psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n\n    if (!pfColor && !psColor) {\n      return;\n    }\n\n    let [fColor, sColor] = this.getPluginParticleColors(particle);\n    const pOptions = particle.options;\n    const twinkle = pOptions.twinkle.particles;\n    const twinkling = twinkle.enable && Math.random() < twinkle.frequency;\n\n    if (!fColor || !sColor) {\n      const twinkleRgb = colorToHsl(twinkle.color);\n\n      if (!fColor) {\n        fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : pfColor ? pfColor : undefined;\n      }\n\n      if (!sColor) {\n        sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : psColor ? psColor : undefined;\n      }\n    }\n\n    const options = this.container.actualOptions;\n    const zIndexOptions = particle.options.zIndex;\n    const zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate;\n    const radius = particle.getRadius();\n    const opacity = twinkling ? twinkle.opacity : (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n    const strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity;\n    const zOpacity = opacity * zOpacityFactor;\n    const fillColorValue = fColor ? getStyleFromHsl(fColor, zOpacity) : undefined;\n\n    if (!fillColorValue && !sColor) {\n      return;\n    }\n\n    this.draw(ctx => {\n      const zSizeFactor = (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate;\n      const zStrokeOpacity = strokeOpacity * zOpacityFactor;\n      const strokeColorValue = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : fillColorValue;\n\n      if (radius <= 0) {\n        return;\n      }\n\n      const container = this.container;\n\n      for (const updater of container.particles.updaters) {\n        if (updater.beforeDraw) {\n          updater.beforeDraw(particle);\n        }\n      }\n\n      drawParticle(this.container, ctx, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow, particle.gradient);\n\n      for (const updater of container.particles.updaters) {\n        if (updater.afterDraw) {\n          updater.afterDraw(particle);\n        }\n      }\n    });\n  }\n\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => {\n      drawPlugin(ctx, plugin, delta);\n    });\n  }\n\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => {\n      drawParticlePlugin(ctx, plugin, particle, delta);\n    });\n  }\n\n  initBackground() {\n    const options = this.container.actualOptions;\n    const background = options.background;\n    const element = this.element;\n    const elementStyle = element === null || element === void 0 ? void 0 : element.style;\n\n    if (!elementStyle) {\n      return;\n    }\n\n    if (background.color) {\n      const color = colorToRgb(background.color);\n      elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n\n  draw(cb) {\n    if (!this.context) {\n      return;\n    }\n\n    return cb(this.context);\n  }\n\n  initCover() {\n    const options = this.container.actualOptions;\n    const cover = options.backgroundMask.cover;\n    const color = cover.color;\n    const coverRgb = colorToRgb(color);\n\n    if (coverRgb) {\n      this.coverColor = {\n        r: coverRgb.r,\n        g: coverRgb.g,\n        b: coverRgb.b,\n        a: cover.opacity\n      };\n    }\n  }\n\n  initTrail() {\n    const options = this.container.actualOptions;\n    const trail = options.particles.move.trail;\n    const fillColor = colorToRgb(trail.fillColor);\n\n    if (fillColor) {\n      const trail = options.particles.move.trail;\n      this.trailFillColor = {\n        r: fillColor.r,\n        g: fillColor.g,\n        b: fillColor.b,\n        a: 1 / trail.length\n      };\n    }\n  }\n\n  getPluginParticleColors(particle) {\n    let fColor;\n    let sColor;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (!fColor && plugin.particleFillColor) {\n        fColor = colorToHsl(plugin.particleFillColor(particle));\n      }\n\n      if (!sColor && plugin.particleStrokeColor) {\n        sColor = colorToHsl(plugin.particleStrokeColor(particle));\n      }\n\n      if (fColor && sColor) {\n        break;\n      }\n    }\n\n    return [fColor, sColor];\n  }\n\n  initStyle() {\n    const element = this.element,\n          options = this.container.actualOptions;\n\n    if (!element) {\n      return;\n    }\n\n    const originalStyle = this.originalStyle;\n\n    if (options.fullScreen.enable) {\n      this.originalStyle = deepExtend({}, element.style);\n      element.style.setProperty(\"position\", \"fixed\", \"important\");\n      element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n      element.style.setProperty(\"top\", \"0\", \"important\");\n      element.style.setProperty(\"left\", \"0\", \"important\");\n      element.style.setProperty(\"width\", \"100%\", \"important\");\n      element.style.setProperty(\"height\", \"100%\", \"important\");\n    } else if (originalStyle) {\n      element.style.position = originalStyle.position;\n      element.style.zIndex = originalStyle.zIndex;\n      element.style.top = originalStyle.top;\n      element.style.left = originalStyle.left;\n      element.style.width = originalStyle.width;\n      element.style.height = originalStyle.height;\n    }\n\n    for (const key in options.style) {\n      if (!key || !options.style) {\n        continue;\n      }\n\n      const value = options.style[key];\n\n      if (!value) {\n        continue;\n      }\n\n      element.style.setProperty(key, value, \"important\");\n    }\n  }\n\n  paintBase(baseColor) {\n    this.draw(ctx => {\n      paintBase(ctx, this.size, baseColor);\n    });\n  }\n\n  lineStyle(p1, p2) {\n    return this.draw(ctx => {\n      const options = this.container.actualOptions;\n      const connectOptions = options.interactivity.modes.connect;\n      return gradient(ctx, p1, p2, connectOptions.links.opacity);\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/jason/csesoc/2022-trainee-1/node_modules/tsparticles/esm/Core/Canvas.js"],"names":["clear","colorToHsl","colorToRgb","deepExtend","drawConnectLine","drawGrabLine","drawParticle","drawParticlePlugin","drawPlugin","getStyleFromHsl","getStyleFromRgb","gradient","paintBase","Constants","Canvas","constructor","container","size","height","width","context","generatedCanvas","init","resize","initStyle","initCover","initTrail","initBackground","paint","loadCanvas","canvas","_a","element","remove","dataset","generatedAttribute","originalStyle","style","offsetHeight","offsetWidth","getContext","retina","destroy","draw","ctx","options","actualOptions","backgroundMask","enable","cover","coverColor","a","trail","particles","move","length","trailFillColor","windowResize","needsRefresh","updateActualOptions","setDensity","plugin","plugins","undefined","refresh","pxRatio","pixelRatio","oldSize","started","resizeFactor","p1","p2","lineStyle","pos1","getPosition","pos2","linksWidth","particle","lineColor","opacity","mousePos","beginPos","delta","_b","_c","_d","_e","_f","spawning","destroyed","pfColor","getFillColor","psColor","getStrokeColor","fColor","sColor","getPluginParticleColors","pOptions","twinkle","twinkling","Math","random","frequency","twinkleRgb","color","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","radius","getRadius","bubble","value","strokeOpacity","stroke","zOpacity","fillColorValue","zSizeFactor","sizeRate","zStrokeOpacity","strokeColorValue","updater","updaters","beforeDraw","composite","shadow","afterDraw","background","elementStyle","backgroundColor","backgroundImage","image","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","cb","coverRgb","r","g","b","fillColor","particleFillColor","particleStrokeColor","fullScreen","setProperty","toString","top","left","key","baseColor","connectOptions","interactivity","modes","connect","links"],"mappings":"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","sourcesContent":["import { clear, colorToHsl, colorToRgb, deepExtend, drawConnectLine, drawGrabLine, drawParticle, drawParticlePlugin, drawPlugin, getStyleFromHsl, getStyleFromRgb, gradient, paintBase, } from \"../Utils\";\nimport { Constants } from \"./Utils\";\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this.context = null;\n        this.generatedCanvas = false;\n    }\n    init() {\n        this.resize();\n        this.initStyle();\n        this.initCover();\n        this.initTrail();\n        this.initBackground();\n        this.paint();\n    }\n    loadCanvas(canvas) {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.generatedCanvas =\n            canvas.dataset && Constants.generatedAttribute in canvas.dataset\n                ? canvas.dataset[Constants.generatedAttribute] === \"true\"\n                : this.generatedCanvas;\n        this.element = canvas;\n        this.originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this.context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    destroy() {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.draw((ctx) => {\n            clear(ctx, this.size);\n        });\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n                clear(ctx, this.size);\n                this.paintBase(getStyleFromRgb(this.coverColor, this.coverColor.a));\n            }\n            else {\n                this.paintBase();\n            }\n        });\n    }\n    clear() {\n        const options = this.container.actualOptions;\n        const trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n            this.paintBase(getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container;\n        this.resize();\n        const needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.resize !== undefined) {\n                plugin.resize();\n            }\n        }\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container;\n        const pxRatio = container.retina.pixelRatio;\n        const size = container.canvas.size;\n        const oldSize = {\n            width: size.width,\n            height: size.height,\n        };\n        size.width = this.element.offsetWidth * pxRatio;\n        size.height = this.element.offsetHeight * pxRatio;\n        this.element.width = size.width;\n        this.element.height = size.height;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    drawConnectLine(p1, p2) {\n        this.draw((ctx) => {\n            var _a;\n            const lineStyle = this.lineStyle(p1, p2);\n            if (!lineStyle) {\n                return;\n            }\n            const pos1 = p1.getPosition();\n            const pos2 = p2.getPosition();\n            drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n        });\n    }\n    drawGrabLine(particle, lineColor, opacity, mousePos) {\n        const container = this.container;\n        this.draw((ctx) => {\n            var _a;\n            const beginPos = particle.getPosition();\n            drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n        });\n    }\n    drawParticle(particle, delta) {\n        var _a, _b, _c, _d, _e, _f;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const pfColor = particle.getFillColor();\n        const psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        if (!pfColor && !psColor) {\n            return;\n        }\n        let [fColor, sColor] = this.getPluginParticleColors(particle);\n        const pOptions = particle.options;\n        const twinkle = pOptions.twinkle.particles;\n        const twinkling = twinkle.enable && Math.random() < twinkle.frequency;\n        if (!fColor || !sColor) {\n            const twinkleRgb = colorToHsl(twinkle.color);\n            if (!fColor) {\n                fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : pfColor ? pfColor : undefined;\n            }\n            if (!sColor) {\n                sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : psColor ? psColor : undefined;\n            }\n        }\n        const options = this.container.actualOptions;\n        const zIndexOptions = particle.options.zIndex;\n        const zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate;\n        const radius = particle.getRadius();\n        const opacity = twinkling ? twinkle.opacity : (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n        const strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity;\n        const zOpacity = opacity * zOpacityFactor;\n        const fillColorValue = fColor ? getStyleFromHsl(fColor, zOpacity) : undefined;\n        if (!fillColorValue && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            const zSizeFactor = (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate;\n            const zStrokeOpacity = strokeOpacity * zOpacityFactor;\n            const strokeColorValue = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : fillColorValue;\n            if (radius <= 0) {\n                return;\n            }\n            const container = this.container;\n            for (const updater of container.particles.updaters) {\n                if (updater.beforeDraw) {\n                    updater.beforeDraw(particle);\n                }\n            }\n            drawParticle(this.container, ctx, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow, particle.gradient);\n            for (const updater of container.particles.updaters) {\n                if (updater.afterDraw) {\n                    updater.afterDraw(particle);\n                }\n            }\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            drawPlugin(ctx, plugin, delta);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            drawParticlePlugin(ctx, plugin, particle, delta);\n        });\n    }\n    initBackground() {\n        const options = this.container.actualOptions;\n        const background = options.background;\n        const element = this.element;\n        const elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = colorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    draw(cb) {\n        if (!this.context) {\n            return;\n        }\n        return cb(this.context);\n    }\n    initCover() {\n        const options = this.container.actualOptions;\n        const cover = options.backgroundMask.cover;\n        const color = cover.color;\n        const coverRgb = colorToRgb(color);\n        if (coverRgb) {\n            this.coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n        }\n    }\n    initTrail() {\n        const options = this.container.actualOptions;\n        const trail = options.particles.move.trail;\n        const fillColor = colorToRgb(trail.fillColor);\n        if (fillColor) {\n            const trail = options.particles.move.trail;\n            this.trailFillColor = {\n                r: fillColor.r,\n                g: fillColor.g,\n                b: fillColor.b,\n                a: 1 / trail.length,\n            };\n        }\n    }\n    getPluginParticleColors(particle) {\n        let fColor;\n        let sColor;\n        for (const [, plugin] of this.container.plugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = colorToHsl(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = colorToHsl(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        const originalStyle = this.originalStyle;\n        if (options.fullScreen.enable) {\n            this.originalStyle = deepExtend({}, element.style);\n            element.style.setProperty(\"position\", \"fixed\", \"important\");\n            element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n            element.style.setProperty(\"top\", \"0\", \"important\");\n            element.style.setProperty(\"left\", \"0\", \"important\");\n            element.style.setProperty(\"width\", \"100%\", \"important\");\n            element.style.setProperty(\"height\", \"100%\", \"important\");\n        }\n        else if (originalStyle) {\n            element.style.position = originalStyle.position;\n            element.style.zIndex = originalStyle.zIndex;\n            element.style.top = originalStyle.top;\n            element.style.left = originalStyle.left;\n            element.style.width = originalStyle.width;\n            element.style.height = originalStyle.height;\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    paintBase(baseColor) {\n        this.draw((ctx) => {\n            paintBase(ctx, this.size, baseColor);\n        });\n    }\n    lineStyle(p1, p2) {\n        return this.draw((ctx) => {\n            const options = this.container.actualOptions;\n            const connectOptions = options.interactivity.modes.connect;\n            return gradient(ctx, p1, p2, connectOptions.links.opacity);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}